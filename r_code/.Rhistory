knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = 'G:\\Il mio Drive\\Teaching\\Data Science Lab\\Lecture 4')
plot_het_eff(c.pred, ci = TRUE, hline=0)
plot_het_eff <- function(cf_preds, ci = FALSE, z = 1.96) {
if (is.null(cf_preds$predictions) || nrow(matrix(cf_preds$predictions)) == 0)
stop("cf_preds must include a matrix called 'predictions'")
out <- ggplot(
mapping = aes(
x = rank(cf_preds$predictions),
y = cf_preds$predictions
)
) +
geom_point() +
labs(x = "Rank", y = "Estimated Treatment Effect") +
theme_light()
if (ci && nrow(matrix(cf_preds$variance.estimates)) > 0) {
out <- out +
geom_errorbar(
mapping = aes(
ymin = cf_preds$predictions + z * sqrt(cf_preds$variance.estimates),
ymax = cf_preds$predictions - z * sqrt(cf_preds$variance.estimates), alpha = 0.15
)
)
}
return(out)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = 'G:\\Il mio Drive\\Teaching\\Data Science Lab\\Lecture 4')
rm(list=ls())
setwd("G:\\Il mio Drive\\Ph.D\\Ph.D\\Applied Econometrics\\Project\\Dati")
library('foreign')
source('functions.R')
data <- read.dta("obs.data.dta")
library(Hmisc)
summary(data)
formula <- as.formula(TREAT ~ addetti_pre + formag + ob2_yes+
locale + privato + prov + anno +
femminile + giovanile +
sez + fatturato_pre)
#install.packages("MatchIt")
library(MatchIt)
m.nn <- matchit(formula, data = data, method = "nearest", m.order="largest")
plot(m.nn, type='hist', col="red")
st.diff.mean.before <- summary(m.nn,standardize=TRUE)$sum.all[,4]
st.diff.mean.after <- summary(m.nn,standardize=TRUE)$sum.matched[,4]
st.diff.mean.before
st.diff.mean.after
tabellareplace <- cbind(st.diff.mean.before, st.diff.mean.after)
rownames(tabellareplace) <- c("propensity_score", "addetti_pre", "formag",
"ob2_yes", "locale", "privato", "prov", "anno",
"femminile", "giovanile", "sez", "fatturato_pre")
#xtable(tabellareplace)
par(mfrow=c(1,1))
par(mar=c(2,5,2,5), xpd=FALSE)
plot(st.diff.mean.before, 1:length(st.diff.mean.after), col="black",
xlab=NA, ylab=NA, yaxt="n",
xlim=c(min(c(st.diff.mean.before,st.diff.mean.after)),
max(c(st.diff.mean.before,st.diff.mean.after))
),
pch=23,
main="Standardized difference in means for covariates")
points(st.diff.mean.after, 1:length(st.diff.mean.after), col="red", pch=19)
axis(2, labels=rownames(tabellareplace), at=1:nrow(tabellareplace), las=1)
abline(h=1:length(st.diff.mean.after), lty="dotted")
abline(v=0, lwd=2)
par(xpd=TRUE)
legend("right",
inset = c(-0.2,0),
legend = c("Initial", "Matched"),
pch = c(23, 19),
col = c("black", "red"),
cex = 1)
t.test(data$outcome[data$TREAT==1], data$outcome[data$TREAT==0])
ATE <- mean(data$outcome[data$TREAT==1]) - mean(data$outcome[data$TREAT==0])
var.ate <- var(data$outcome[data$TREAT==1])/length(which(data$TREAT==1)) +
var(data$outcome[data$TREAT==0])/length(which(data$TREAT==0))
ub <- ATE +1.96*sqrt(var.ate)
lb <- ATE -1.96*sqrt(var.ate)
ATE
ub
lb
# Same Analysis on Matched Units
m.mydata <- match.data(m.nn)
head(m.mydata)
t.test(m.mydata$outcome[m.mydata$TREAT==1], m.mydata$outcome[m.mydata$TREAT==0])
ATE <- mean(m.mydata$outcome[m.mydata$TREAT==1]) - mean(m.mydata$outcome[m.mydata$TREAT==0])
var.ate <- var(m.mydata$outcome[m.mydata$TREAT==1])/length(which(m.mydata$TREAT==1)) +
var(m.mydata$outcome[m.mydata$TREAT==0])/length(which(m.mydata$TREAT==0))
ub <- ATE +1.96*sqrt(var.ate)
lb <- ATE -1.96*sqrt(var.ate)
ATE
ub
lb
library(rpart)
formula <- as.formula(as.factor(outcome) ~ addetti_pre + formag + ob2_yes+
locale + privato + prov + anno +
femminile + giovanile +
sez + fatturato_pre + TREAT)
one.tree <- rpart(formula, data = data)
yhat_1 <- predict(one.tree, data[data$TREAT==1,], type = "class")
yhat_0 <- predict(one.tree, data[data$TREAT==0,], type = "class")
ATE_tree <- mean(as.numeric(as.vector(yhat_1))) - mean(as.numeric(as.vector(yhat_0)))
ATE_tree
formula <- as.formula(as.factor(outcome) ~ addetti_pre + formag + ob2_yes+
locale + privato + prov + anno +
femminile + giovanile +
sez + fatturato_pre)
y1.tree <- rpart(formula, data = data[data$TREAT==1,])
yhat_1 <- predict(y1.tree, data[data$TREAT==1,], type = "class")
y0.tree <- rpart(formula, data = data[data$TREAT==0,])
yhat_0 <- predict(y0.tree, data[data$TREAT==0,], type = "class")
ATE_trees <- mean(as.numeric(as.vector(yhat_1))) - mean(as.numeric(as.vector(yhat_0)))
ATE_trees
library(grf)
variables <- c("addetti_pre", "formag",
"ob2_yes", "locale", "privato", "prov", "anno",
"femminile", "giovanile", "sez", "fatturato_pre")
X <- as.data.frame(data[variables])
c.forest <- causal_forest(X, data$outcome, data$TREAT)
# Predict using the forest.
c.pred <- predict(c.forest, X)
ATE <- mean(c.pred$predictions)
ATE
# Predict with confidence intervals; growing more trees is now recommended.
c.forest <- causal_forest(X, data$outcome, data$TREAT, num.trees = 4000)
c.pred <- predict(c.forest, X, estimate.variance = TRUE)
plot_het_eff <- function(cf_preds, ci = FALSE, z = 1.96) {
if (is.null(cf_preds$predictions) || nrow(matrix(cf_preds$predictions)) == 0)
stop("cf_preds must include a matrix called 'predictions'")
out <- ggplot(
mapping = aes(
x = rank(cf_preds$predictions),
y = cf_preds$predictions
)
) +
geom_point() +
labs(x = "Rank", y = "Estimated Treatment Effect") +
theme_light()
if (ci && nrow(matrix(cf_preds$variance.estimates)) > 0) {
out <- out +
geom_errorbar(
mapping = aes(
ymin = cf_preds$predictions + z * sqrt(cf_preds$variance.estimates),
ymax = cf_preds$predictions - z * sqrt(cf_preds$variance.estimates), alpha = 0.15
)
)
}
return(out)
}
plot_het_eff(c.pred, ci = TRUE, hline=0)
plot_het_eff(c.pred, ci = TRUE)
hline=0
plot_het_eff(c.pred, ci = TRUE)
abline(h=0, col="blue")
plot_het_eff(c.pred, ci = TRUE) +
+ geom_hline(yintercept=0, linetype="dashed",
color = "red", size=2)
plot_het_eff(c.pred, ci = TRUE)
+ geom_hline(yintercept=0, linetype="dashed",
color = "red", size=2)
plot <- plot_het_eff(c.pred, ci = TRUE)
plot  + geom_hline(yintercept=0, linetype="dashed",
color = "red", size=2)
plot <- plot_het_eff(c.pred, ci = TRUE)
plot  + geom_hline(yintercept=0, linetype="dashed",
color = "red", size=1)
rm(list=ls())
setwd("G:\\Il mio Drive\\Ph.D\\Ph.D\\Applied Econometrics\\Project\\Dati")
library('foreign')
data <- read.dta("obs.data.dta")
library(Hmisc)
summary(data)
formula <- as.formula(TREAT ~ addetti_pre + formag + ob2_yes+
locale + privato + prov + anno +
femminile + giovanile +
sez + fatturato_pre)
#install.packages("MatchIt")
library(MatchIt)
m.nn <- matchit(formula, data = data, method = "nearest", m.order="largest")
plot(m.nn, type='hist', col="red")
st.diff.mean.before <- summary(m.nn,standardize=TRUE)$sum.all[,4]
st.diff.mean.after <- summary(m.nn,standardize=TRUE)$sum.matched[,4]
st.diff.mean.before
st.diff.mean.after
tabellareplace <- cbind(st.diff.mean.before, st.diff.mean.after)
rownames(tabellareplace) <- c("propensity_score", "addetti_pre", "formag",
"ob2_yes", "locale", "privato", "prov", "anno",
"femminile", "giovanile", "sez", "fatturato_pre")
#xtable(tabellareplace)
par(mfrow=c(1,1))
par(mar=c(2,5,2,5), xpd=FALSE)
plot(st.diff.mean.before, 1:length(st.diff.mean.after), col="black",
xlab=NA, ylab=NA, yaxt="n",
xlim=c(min(c(st.diff.mean.before,st.diff.mean.after)),
max(c(st.diff.mean.before,st.diff.mean.after))
),
pch=23,
main="Standardized difference in means for covariates")
points(st.diff.mean.after, 1:length(st.diff.mean.after), col="red", pch=19)
axis(2, labels=rownames(tabellareplace), at=1:nrow(tabellareplace), las=1)
abline(h=1:length(st.diff.mean.after), lty="dotted")
abline(v=0, lwd=2)
par(xpd=TRUE)
legend("right",
inset = c(-0.2,0),
legend = c("Initial", "Matched"),
pch = c(23, 19),
col = c("black", "red"),
cex = 1)
t.test(data$outcome[data$TREAT==1], data$outcome[data$TREAT==0])
ATE <- mean(data$outcome[data$TREAT==1]) - mean(data$outcome[data$TREAT==0])
var.ate <- var(data$outcome[data$TREAT==1])/length(which(data$TREAT==1)) +
var(data$outcome[data$TREAT==0])/length(which(data$TREAT==0))
ub <- ATE +1.96*sqrt(var.ate)
lb <- ATE -1.96*sqrt(var.ate)
ATE
ub
lb
# Same Analysis on Matched Units
m.mydata <- match.data(m.nn)
head(m.mydata)
t.test(m.mydata$outcome[m.mydata$TREAT==1], m.mydata$outcome[m.mydata$TREAT==0])
ATE <- mean(m.mydata$outcome[m.mydata$TREAT==1]) - mean(m.mydata$outcome[m.mydata$TREAT==0])
var.ate <- var(m.mydata$outcome[m.mydata$TREAT==1])/length(which(m.mydata$TREAT==1)) +
var(m.mydata$outcome[m.mydata$TREAT==0])/length(which(m.mydata$TREAT==0))
ub <- ATE +1.96*sqrt(var.ate)
lb <- ATE -1.96*sqrt(var.ate)
ATE
ub
lb
library(rpart)
formula <- as.formula(as.factor(outcome) ~ addetti_pre + formag + ob2_yes+
locale + privato + prov + anno +
femminile + giovanile +
sez + fatturato_pre + TREAT)
one.tree <- rpart(formula, data = data)
yhat_1 <- predict(one.tree, data[data$TREAT==1,], type = "class")
yhat_0 <- predict(one.tree, data[data$TREAT==0,], type = "class")
ATE_tree <- mean(as.numeric(as.vector(yhat_1))) - mean(as.numeric(as.vector(yhat_0)))
ATE_tree
library(grf)
variables <- c("addetti_pre", "formag",
"ob2_yes", "locale", "privato", "prov", "anno",
"femminile", "giovanile", "sez", "fatturato_pre")
X <- as.data.frame(data[variables])
c.forest <- causal_forest(X, data$outcome, data$TREAT)
# Predict using the forest.
c.pred <- predict(c.forest, X)
ATE <- mean(c.pred$predictions)
ATE
# Predict with confidence intervals; growing more trees is now recommended.
c.forest <- causal_forest(X, data$outcome, data$TREAT, num.trees = 4000)
c.pred <- predict(c.forest, X, estimate.variance = TRUE)
plot_het_eff <- function(cf_preds, ci = FALSE, z = 1.96) {
if (is.null(cf_preds$predictions) || nrow(matrix(cf_preds$predictions)) == 0)
stop("cf_preds must include a matrix called 'predictions'")
out <- ggplot(
mapping = aes(
x = rank(cf_preds$predictions),
y = cf_preds$predictions
)
) +
geom_point() +
labs(x = "Rank", y = "Estimated Treatment Effect") +
theme_light()
if (ci && nrow(matrix(cf_preds$variance.estimates)) > 0) {
out <- out +
geom_errorbar(
mapping = aes(
ymin = cf_preds$predictions + z * sqrt(cf_preds$variance.estimates),
ymax = cf_preds$predictions - z * sqrt(cf_preds$variance.estimates), alpha = 0.15
)
)
}
return(out)
}
plot <- plot_het_eff(c.pred, ci = TRUE)
plot  + geom_hline(yintercept=0, linetype="dashed",
color = "red", size=1)
dim(data)
library(bcf)
formula_ps <- as.formula(as.factor(TREAT) ~ addetti_pre + formag + ob2_yes+
locale + privato + prov + anno +
femminile + giovanile +
sez + fatturato_pre)
logit<-glm(formula_ps, data= data, family=binomial(link='logit'))
pihat <- predict(logit, newdata = X, type='response')
bcf_fit <- bcf(data$outcome, data$TREAT, as.matrix(X), as.matrix(X), pihat, nburn=2000, nsim=2000)
library(matrixStats)
# Get posterior of treatment effects
tau_post <- bcf_fit$tau
tau_post
library(matrixStats)
# Get posterior of treatment effects
tau_post <- bcf_fit$tau
predictions <- colMeans(tau_post)
ATE <- mean(predictions)
ATE
variance.estimates <- colVars(tau_post)
bcf.pred <- as.data.frame(cbind(predictions, variance.estimates))
plot <- plot_het_eff(c.pred, ci = TRUE)
plot  + geom_hline(yintercept=0, linetype="dashed",
color = "red", size=1)
formula <- as.formula(predictions ~ addetti_pre + formag + ob2_yes+
locale + privato + prov + anno +
femminile + giovanile +
sez + fatturato_pre)
rules.tree <- rpart(formula, data = data)
rpart.plot::rpart.plot(rules.tree)
